// Generated by CoffeeScript 2.5.1
(function() {
  var Lexer, isDigest, isLetter;

  isDigest = function(char) {
    var code;
    code = char != null ? char.charCodeAt(0) : void 0;
    return (48 <= code && code <= 57);
  };

  isLetter = function(char) {
    var code;
    code = char != null ? char.charCodeAt(0) : void 0;
    return (65 <= code && code <= 90) || (97 <= code && code <= 122);
  };

  Lexer = (function() {
    class Lexer {
      constructor(input) {
        this.input = input;
      }

      read() {
        return this.ch = this.input.length > this.pos + 1 ? this.input[++this.pos] : null;
      }

      next() {
        var id, left, num, str, value;
        while (true) {
          if (this.ch === ' ') {
            this.read();
          } else {
            break;
          }
        }
        if (!this.ch) {
          return null;
        }
        if (isLetter(this.ch)) {
          id = this.ch;
          while (isLetter(this.read())) {
            id += this.ch;
          }
          return {
            type: 'id',
            value: id
          };
        }
        if (isDigest(this.ch)) {
          num = this.ch;
          while (isDigest(this.read())) {
            num += this.ch;
          }
          return {
            type: 'number',
            value: num
          };
        }
        if (this.ch === '"' || this.ch === '\'' || this.ch === '`') {
          left = this.ch;
          str = '';
          while (true) {
            switch (this.read()) {
              case left:
                this.ch = ' ';
                return this.peek = {
                  type: 'string',
                  value: str
                };
              case '\\':
                str += this.read();
                continue;
              case null:
                throw 'Unexpected EOF';
              default:
                str += this.ch;
            }
          }
        }
        value = this.ch;
        this.ch = ' ';
        return this.peek = {
          type: 'char',
          value
        };
      }

    };

    Lexer.prototype.pos = -1;

    Lexer.prototype.ch = ' ';

    return Lexer;

  }).call(this);

  module.exports = function(initiator, terminator, src) {
    var count, lexer, token;
    lexer = new Lexer(src);
    count = 1;
    while (true) {
      if (count === 0) {
        break;
      }
      token = lexer.next();
      if (!token) {
        throw 'Unexpected EOF';
      }
      if (token.type === 'char' && token.value === initiator) {
        count++;
      }
      if (token.type === 'char' && token.value === terminator) {
        count--;
      }
    }
    return {
      code: src.slice(0, +(lexer.pos - 1) + 1 || 9e9),
      rest: src.slice(lexer.pos + 1)
    };
  };

}).call(this);
